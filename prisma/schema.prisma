// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String   @unique
  username  String   @unique
  email     String   @unique
  photo     String?
  role      Role     @default(USER)
  quizAttempts QuizAttempt[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobRole {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  name      String              @unique
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  learnings LearningToJobRole[]
  quizzes   Quiz[]
}

enum LearningType {
  VIDEO
  TEXT
}

enum LearningVisibility {
  PUBLIC
  PRIVATE
}

model Learning {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  type         LearningType
  visibility   LearningVisibility  @default(PUBLIC)
  jobRoles     LearningToJobRole[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  videoContent VideoContent?
  textContent  TextContent?
}

model LearningToJobRole {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  learning   Learning @relation(fields: [learningId], references: [id])
  learningId String   @db.ObjectId
  jobRole    JobRole  @relation(fields: [jobRoleId], references: [id])
  jobRoleId  String   @db.ObjectId

  @@unique([learningId, jobRoleId])
}

model VideoContent {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  learning   Learning @relation(fields: [learningId], references: [id])
  learningId String   @unique @db.ObjectId
  videoUrl   String
  videoTitle String? // Make videoTitle optional
  content    String
}

model TextContent {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  learning   Learning @relation(fields: [learningId], references: [id])
  learningId String   @unique @db.ObjectId
  content    String
}

model Quiz {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  jobRole    JobRole?  @relation(fields: [jobRoleId], references: [id])
  jobRoleId  String?   @db.ObjectId
  questions  Question[]
  visibility LearningVisibility @default(PUBLIC)
  attempts   QuizAttempt[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Question {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  answers  Answer[]
  quiz     Quiz     @relation(fields: [quizId], references: [id])
  quizId   String   @db.ObjectId
  isMultipleChoice Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model QuizAttempt {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String   @db.ObjectId
  score     Int
  totalQuestions Int
  completed Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model ContactSubmission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}
